networks:
  product-net:
    driver: bridge

services:
  product-database:
    image: mysql:latest
    container_name: product-database
    environment:
      POSTGRES_USER: product_user
      POSTGRES_PASSWORD: product_password
      POSTGRES_DB: product_db
    networks:
      - product-net
    ports:
      - "5432:5432"

  redis-node-1:
    image: redis:latest # 您可以选择一个具体的版本
    container_name: redis-node-1
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      - product-net
    ports:
      - "7001:6379"

  redis-node-2:
    image: redis:latest
    container_name: redis-node-2
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      - product-net
    ports:
      - "7002:6379"

  redis-node-3:
    image: redis:latest
    container_name: redis-node-3
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      - product-net
    ports:
      - "7003:6379"

  redis-node-4:
    image: redis:latest
    container_name: redis-node-4
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      - product-net
    ports:
      - "7004:6379"

  redis-node-5:
    image: redis:latest
    container_name: redis-node-5
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      - product-net
    ports:
      - "7005:6379"

  redis-node-6:
    image: redis:latest
    container_name: redis-node-6
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    networks:
      - product-net
    ports:
      - "7006:6379"

  redis-cluster-creator:
    image: redis:latest
    container_name: redis-cluster-creator
    networks:
      - product-net
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    # 等待节点启动并尝试创建集群。在实际生产中，这应该更健壮。
    # --cluster-replicas 1 表示每个主节点有1个副本 (3主3从)
    command: >
      sh -c "
        echo 'Waiting for Redis nodes to start...' &&
        sleep 15 &&
        echo 'Attempting to create Redis cluster...' &&
        echo 'yes' | redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 --cluster-replicas 1 && echo 'Redis cluster creation attempt finished.'
      "
    # 这个服务在执行完命令后会退出。
  
  product-jaeger:
    networks:
    - product-net
    image: jaegertracing/all-in-one:latest
    container_name: product-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "6831:6831/udp"
  
  product-service:
    container_name: product-service
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - product-net
    ports:
      - "8080:8080"
      - "50051:50051" # gRPC端口
    depends_on:
      - kafka
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
      - product-jaeger
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_NODES: redis-node-1:6379,redis-node-2:6379,redis-node-3:6379,redis-node-4:6379,redis-node-5:6379,redis-node-6:6379
      REDIS_CLUSTER_ENABLED: true