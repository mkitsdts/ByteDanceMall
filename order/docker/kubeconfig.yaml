apiVersion: v1
kind: Namespace
metadata:
  name: gomall
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-config
  namespace: gomall
data:
  config.yaml: |
    server:
      port: 14803

    database:
      master: "order-mysql"
      slaves: []
      port: 3306
      username: "test"
      password: "test"
      name: "order"

    redis:
      host: ["order-redis"]
      port: 6379

    kafka_writer:
      host: ["kafka:9092"]
      username: ""
      password: ""
      topic:
        - "gomall-order-status"
        - "gomall-order-status-dmq"
      group_id: "1"

    kafka_reader:
      host: ["kafka:9092"]
      username: ""
      password: ""
      topic:
        - "gomall-order-status"
        - "gomall-order-status-dmq"
      group_id: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: order-mysql
  namespace: gomall
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: gomall
spec:
  serviceName: order-mysql
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_DATABASE
              value: order
            - name: MYSQL_USER
              value: test
            - name: MYSQL_PASSWORD
              value: test
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: order-redis
  namespace: gomall
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: gomall
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:8
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: gomall
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: gomall
spec:
  selector:
    app: kafka
  ports:
    - name: broker
      port: 9092
      targetPort: 9092
    - name: controller
      port: 29093
      targetPort: 29093
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: gomall
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: apache/kafka:4.0.0
          ports:
            - containerPort: 9092
            - containerPort: 29093
          env:
            - name: KAFKA_NODE_ID
              value: "1"
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "1@kafka:29093"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:9092,CONTROLLER://:29093"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: "abcdefghijklmnopqrstuvwx123456"
            - name: KAFKA_HEAP_OPTS
              value: "-Xms256m -Xmx512m"
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-pvc
  namespace: gomall
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: gomall
spec:
  selector:
    app: order-service
  type: ClusterIP
  ports:
    - port: 14803
      targetPort: 14803
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: gomall
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
        - name: order-service
          image: order-service:latest   # 请先构建并加载到集群
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 14803
          env:
            - name: CONFIG_PATH
              value: /app/config.yaml
          volumeMounts:
            - name: order-config
              mountPath: /app/config.yaml
              subPath: config.yaml
      volumes:
        - name: order-config
          configMap:
            name: order-config