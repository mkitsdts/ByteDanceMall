// 支付模块的定义

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: payment.proto

package payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_ApplyCharge_FullMethodName  = "/payment.PaymentService/ApplyCharge"
	PaymentService_CancelCharge_FullMethodName = "/payment.PaymentService/CancelCharge"
	PaymentService_QueryStatus_FullMethodName  = "/payment.PaymentService/QueryStatus"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	ApplyCharge(ctx context.Context, in *ApplyChargeReq, opts ...grpc.CallOption) (*ApplyChargeResp, error)
	CancelCharge(ctx context.Context, in *CancelChargeReq, opts ...grpc.CallOption) (*CancelChargeResp, error)
	QueryStatus(ctx context.Context, in *QueryStatusReq, opts ...grpc.CallOption) (*QueryStatusResp, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) ApplyCharge(ctx context.Context, in *ApplyChargeReq, opts ...grpc.CallOption) (*ApplyChargeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyChargeResp)
	err := c.cc.Invoke(ctx, PaymentService_ApplyCharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CancelCharge(ctx context.Context, in *CancelChargeReq, opts ...grpc.CallOption) (*CancelChargeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelChargeResp)
	err := c.cc.Invoke(ctx, PaymentService_CancelCharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) QueryStatus(ctx context.Context, in *QueryStatusReq, opts ...grpc.CallOption) (*QueryStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStatusResp)
	err := c.cc.Invoke(ctx, PaymentService_QueryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
type PaymentServiceServer interface {
	ApplyCharge(context.Context, *ApplyChargeReq) (*ApplyChargeResp, error)
	CancelCharge(context.Context, *CancelChargeReq) (*CancelChargeResp, error)
	QueryStatus(context.Context, *QueryStatusReq) (*QueryStatusResp, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) ApplyCharge(context.Context, *ApplyChargeReq) (*ApplyChargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCharge not implemented")
}
func (UnimplementedPaymentServiceServer) CancelCharge(context.Context, *CancelChargeReq) (*CancelChargeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCharge not implemented")
}
func (UnimplementedPaymentServiceServer) QueryStatus(context.Context, *QueryStatusReq) (*QueryStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStatus not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_ApplyCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyChargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ApplyCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ApplyCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ApplyCharge(ctx, req.(*ApplyChargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CancelCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelChargeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CancelCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CancelCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CancelCharge(ctx, req.(*CancelChargeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_QueryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).QueryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_QueryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).QueryStatus(ctx, req.(*QueryStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyCharge",
			Handler:    _PaymentService_ApplyCharge_Handler,
		},
		{
			MethodName: "CancelCharge",
			Handler:    _PaymentService_CancelCharge_Handler,
		},
		{
			MethodName: "QueryStatus",
			Handler:    _PaymentService_QueryStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
