// 秒杀模块的定义

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: seckill.proto

package seckill

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeckillService_AddItem_FullMethodName        = "/seckill.SeckillService/AddItem"
	SeckillService_TrySecKillItem_FullMethodName = "/seckill.SeckillService/TrySecKillItem"
)

// SeckillServiceClient is the client API for SeckillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeckillServiceClient interface {
	AddItem(ctx context.Context, in *AddItemReq, opts ...grpc.CallOption) (*AddItemResp, error)
	TrySecKillItem(ctx context.Context, in *TrySecKillItemReq, opts ...grpc.CallOption) (*TrySecKillItemResp, error)
}

type seckillServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeckillServiceClient(cc grpc.ClientConnInterface) SeckillServiceClient {
	return &seckillServiceClient{cc}
}

func (c *seckillServiceClient) AddItem(ctx context.Context, in *AddItemReq, opts ...grpc.CallOption) (*AddItemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemResp)
	err := c.cc.Invoke(ctx, SeckillService_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillServiceClient) TrySecKillItem(ctx context.Context, in *TrySecKillItemReq, opts ...grpc.CallOption) (*TrySecKillItemResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrySecKillItemResp)
	err := c.cc.Invoke(ctx, SeckillService_TrySecKillItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeckillServiceServer is the server API for SeckillService service.
// All implementations must embed UnimplementedSeckillServiceServer
// for forward compatibility.
type SeckillServiceServer interface {
	AddItem(context.Context, *AddItemReq) (*AddItemResp, error)
	TrySecKillItem(context.Context, *TrySecKillItemReq) (*TrySecKillItemResp, error)
	mustEmbedUnimplementedSeckillServiceServer()
}

// UnimplementedSeckillServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeckillServiceServer struct{}

func (UnimplementedSeckillServiceServer) AddItem(context.Context, *AddItemReq) (*AddItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedSeckillServiceServer) TrySecKillItem(context.Context, *TrySecKillItemReq) (*TrySecKillItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrySecKillItem not implemented")
}
func (UnimplementedSeckillServiceServer) mustEmbedUnimplementedSeckillServiceServer() {}
func (UnimplementedSeckillServiceServer) testEmbeddedByValue()                        {}

// UnsafeSeckillServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeckillServiceServer will
// result in compilation errors.
type UnsafeSeckillServiceServer interface {
	mustEmbedUnimplementedSeckillServiceServer()
}

func RegisterSeckillServiceServer(s grpc.ServiceRegistrar, srv SeckillServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeckillServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeckillService_ServiceDesc, srv)
}

func _SeckillService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServiceServer).AddItem(ctx, req.(*AddItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeckillService_TrySecKillItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrySecKillItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillServiceServer).TrySecKillItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillService_TrySecKillItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillServiceServer).TrySecKillItem(ctx, req.(*TrySecKillItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SeckillService_ServiceDesc is the grpc.ServiceDesc for SeckillService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeckillService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seckill.SeckillService",
	HandlerType: (*SeckillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _SeckillService_AddItem_Handler,
		},
		{
			MethodName: "TrySecKillItem",
			Handler:    _SeckillService_TrySecKillItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seckill.proto",
}
